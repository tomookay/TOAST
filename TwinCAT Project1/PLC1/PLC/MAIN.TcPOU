<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{71925003-04a7-4f4b-805b-2cb8426e0ca0}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	GetTime: NT_GetTime;
	cpuusage:TC_CpuUsage;
	getLocalAMS: FB_GetLocalAmsNetId;
	ReadSystemInfo:PLC_ReadSymInfo;
	getLatency:TC_SysLatency;
	restartTC:TC_Restart;
	stopTC:TC_Stop;
	configModeTC:TC_Config;
	reqHostName:FB_GetHostName;
	getNetworkadaptors:FB_GetAdaptersInfo;
	getDeviceInfoEx:FB_GetDeviceIdentificationEx;
	
	getLicences:FB_GetLicensesEx;
	
	
	

	oneSec: fb_flasher;
	tenSec: fb_flasher;
	oneMSec: fb_flasher;
	hundredMSec: fb_flasher;
	
	pulseoneSec: R_TRIG;
	pulsetenSec: R_TRIG;
	pulseoneMSec: R_TRIG;
	pulsehundredMSec: R_TRIG;
	i: INT;
	nLicPres: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//call PLC data
actPLC();

//call init data for machine
actInit();

//call clock memory
actClockMemory();

//call all diagnostics
actDiag();

//call licence view
actLicenceView();

//call safety main
prgSafetyMain();


//call base machine

//call HMI
//calls logic to drive the HMI
pouHMI();

//call machine base
pouMachine();

//call station 1
//calls motions only associated with station 1
IF System.gSetup.stationEnable[1] THEN pouStation1(); END_IF;

//call station 2
IF System.gSetup.stationEnable[2] THEN pouStation2(); END_IF;

//call station 3
IF System.gSetup.stationEnable[3] THEN pouStation3(); END_IF;

//call station 4
IF System.gSetup.stationEnable[4] THEN pouStation4(); END_IF;

//call station 5
IF System.gSetup.stationEnable[5] THEN pouStation5(); END_IF;

//call station 6
IF System.gSetup.stationEnable[6] THEN pouStation6(); END_IF;

//there are only ever 6 maximum stations

//call logic after station calls for scan after the call of stations
prgAfterStationScan();


//test call for data view
pouDataDisplay();

//call mode rows - call after to use scan logic
prgModeRows();

//call program for machine settings
pouMachineSettings();]]></ST>
    </Implementation>
    <Action Name="actClockMemory" Id="{70b275c8-6e52-422a-a97c-c2dc26306982}">
      <Implementation>
        <ST><![CDATA[//clock memory call

//timer call
oneMsec(timeVal:=T#1MS);
System.oneMilliSecond:=oneMSec.q;
pulseoneMSec(CLK:= System.oneMilliSecond);
System.PulseOneMilliSecond := pulseoneMSec.Q;

oneSec(timeVal:=T#1S);
System.OneSecond:=oneSec.q;
pulseoneSec(CLK:= System.OneSecond);
System.PulseOneSecond  := pulseoneSec.Q;

tenSec(timeVal:=T#10S);
System.TenSecond:=tenSec.q;
pulsetenSec(CLK:= System.TenSecond);
System.PulseTenSecond := pulsetenSec.Q;

hundredMSec(timeVal:=T#100MS);
System.hundredMilliSecond:=hundredMSec.q;
pulsehundredMSec(CLK:= System.hundredMilliSecond);
System.PulseHundredMilliSecond := pulsehundredMSec.Q;

IF system.thetime.wDay = 28 AND System.thetime.wMonth = 11 THEN
	System.gHappyBirthday := TRUE;
	ELSE
	System.gHappyBirthday := FALSE;
END_IF









]]></ST>
      </Implementation>
    </Action>
    <Action Name="actDiag" Id="{64b32e1c-14ce-4e5e-ba1b-93c63e0d0e72}">
      <Implementation>
        <ST><![CDATA[//call diag blocks
pouDPDiag();
pouEtherCATdiag();
pouPROFINETdiag();


]]></ST>
      </Implementation>
    </Action>
    <Action Name="actInit" Id="{bf1180f2-7fec-4b2c-b558-cdc863a715c2}">
      <Implementation>
        <ST><![CDATA[//block must be called first in scan

//Initalise PLC data for first scan

//activate the first station
IF System.myPlcInfoTask1.FirstCycle THEN
	gHMIData.gActiveStationNumber := 1;
	gHMIData.gStationSelected[1] := TRUE;
	gHMIData.gStationSelected[2] := FALSE;
	gHMIData.gStationSelected[3] := FALSE;
	gHMIData.gStationSelected[4] := FALSE;
	gHMIData.gStationSelected[5] := FALSE;
	gHMIData.gStationSelected[6] := FALSE;
	
	
	//start in manual mode
	S1_Global.station.Data.Manual := TRUE;
	S1_Global.station.Data.AutoCycle := FALSE;
	S1_Global.station.Data.ContCycle := TRUE;
	S1_Global.station.Data.SingleCycle := FALSE;
	
	FC_S1_AssignTaskTimes(iqPartData:=S1_Global.station);
	FC_S2_AssignTaskTimes(iqPartData:=S2_Global.station);
	FC_S3_AssignTaskTimes(iqPartData:=S3_Global.station);
	FC_S4_AssignTaskTimes(iqPartData:=S4_Global.station);
	FC_S5_AssignTaskTimes(iqPartData:=S5_Global.station);
	FC_S6_AssignTaskTimes(iqPartData:=S6_Global.station);
	
	
END_IF

//globals used in future scan(s)
GlobalMessages.gAnyWarnings := FALSE;
GlobalMessages.gAnyFaultMessage := FALSE;

//set other parameters
FC_Setup();

]]></ST>
      </Implementation>
    </Action>
    <Action Name="actLicenceView" Id="{fc1ab9e8-5a1d-4a9c-8cd4-6f130b987644}">
      <Implementation>
        <ST><![CDATA[	//get licence info
	getLicences		(	bExecute:= gLicenceView.tCallUpdateLicenceList,
						tTimeout:=T#10S,
						sNetId:=
					);
	//reset read BOOL
	gLicenceView.tCallUpdateLicenceList := FALSE;
					
gLicenceView.nValidLicences		:=	getLicences.nValidLicenses;
gLicenceView.aValidLicences		:=	getLicences.aValidLicenses;

gLicenceView.nPendingLicences	:=	getLicences.nPendingLicenses;
gLicenceView.aPendingLicences	:=	getLicences.aPendingLicenses;

gLicenceView.nDemoLicences		:=	getLicences.nDemoLicenses;
gLicenceView.aDemoLicences		:=	getLicences.aDemoLicenses;

gLicenceView.nOEMLicences		:=	getLicences.nOemLicenses;
gLicenceView.aOEMLicences		:=	getLicences.aOemLicenses;

gLicenceView.nFailedLicences	:=	getLicences.nFailedLicenses;
gLicenceView.aFailedLicences	:=	getLicences.aFailedLicenses;

gLicenceView.nInvalidLicences	:=	getLicences.nInvalidLicenses;
gLicenceView.aInvalidLicences	:=	getLicences.aInvalidLicenses;

//gLicenceView.maxlicenceIndex := 	gLicenceView.nDemoLicences;
//gLicenceView.tActiveLicenceArray := gLicenceView.ademoLicences[1];


//check if last radio index was changed
IF gLicenceView.licenceType = gLicenceView.tActiveLicenceSelLast THEN
	;
	ELSE
		
	//update list BOOL
	gLicenceView.tCallUpdateLicenceList := TRUE;
	//reset check for next scan
	gLicenceView.tActiveLicenceSelLast :=  gLicenceView.licenceType;
	
END_IF

//assign licence name into array
IF gLicenceView.tCallUpdateLicenceList THEN
	
	//set integer limits for array selection
gLicenceView.tActiveLicenceSel := MAX(gLicenceView.tActiveLicenceSel,1);
gLicenceView.tActiveLicenceSel := MIN(gLicenceView.tActiveLicenceSel,nMaxLicenses);

	
	memset( destAddr:=	ADR(gLicenceView.tActiveLicenceArray),
		 	fillByte:=	16#0,
			n:=			SIZEOF(gLicenceView.tActiveLicenceArray)
			);
	
	memset( destAddr:=	ADR(gLicenceView.tActiveLicenceList),
		 	fillByte:=	16#0,
			n:=			SIZEOF(gLicenceView.tActiveLicenceList)
			);
			
		
	
	
	CASE gLicenceView.licenceType OF
		0:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nValidLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aValidLicences[nLicPres].sLicenseName;
		END_FOR
		
		1:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nPendingLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aPendingLicences[nLicPres].sLicenseName;
		END_FOR
		
		2:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nDemoLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aDemoLicences[nLicPres].sLicenseName;
		END_FOR
		
		3:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nOEMLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aOEMLicences[nLicPres].sLicenseName;
		END_FOR
		
		4:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nFailedLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aFailedLicences[nLicPres].sLicenseName;
		END_FOR
		
		5:
		gLicenceView.maxlicenceIndex := 	gLicenceView.nInvalidLicences;
		FOR nLicPres := 1 TO gLicenceView.maxlicenceIndex DO
			gLicenceView.tActiveLicenceList[nLicPres] := gLicenceView.aInvalidLicences[nLicPres].sLicenseName;
		END_FOR
	
	END_CASE
END_IF

//move data structure into sole struct on HMI
IF gLicenceView.licenceType > 0 THEN

CASE gLicenceView.licenceType OF
	0: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aValidLicences[gLicenceView.tActiveLicenceSel];
	
	1: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aPendingLicences[gLicenceView.tActiveLicenceSel];
	
	2: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aDemoLicences[gLicenceView.tActiveLicenceSel];
	
	3: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aOEMLicences[gLicenceView.tActiveLicenceSel];
	
	4: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aFailedLicences[gLicenceView.tActiveLicenceSel];
	
	5: 
	//move selected array into viewing arrayh
	gLicenceView.tActiveLicenceArray := gLicenceView.aInvalidLicences[gLicenceView.tActiveLicenceSel];
	
END_CASE
END_IF			
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="actPLC" Id="{28d0350d-3a28-47f0-90b1-3e048fd4248d}">
      <Implementation>
        <ST><![CDATA[//act call PLC
//get PLC app data
	System.myPlcAppSystemInfo:=TwinCAT_SystemInfoVarList._AppInfo;
	
	//get task info
	System.myPlcInfoTask1 := TwinCAT_SystemInfoVarList._TaskInfo[1];
	
	//move task scan time to memory
	System.ScanTimeReq := UDINT_TO_REAL(System.myPlcInfoTask1.CycleTime);
	System.ScanTimeAct := UDINT_TO_REAL(System.myPlcInfoTask1.LastExecTime);
	
	//scale to correct factor
	System.ScanTimeReq := System.ScanTimeReq / 10000;
	System.ScanTimeAct := System.ScanTimeAct / 10000;
	
	//if the scan time is a new record, then save the scan time and the scan number
	IF System.ScanTimeAct > System.ScanTimeRecord  THEN
		//debug message for new record scan
		System.ScanTimeRecord := System.ScanTimeAct;
		System.ScanTimeRecordScan:= System.myPlcInfoTask1.CycleCount;
	END_IF
	
	//get the local AMS address
	getLocalAMS(	bExecute:=System.myPlcInfoTask1.FirstCycle, 
					tTimeOut:=T#1M
				);
	
	System.AmsNetIdstr:=getLocalAMS.AddrString;
	System.AmsNetIdbytes:=getLocalAMS.AddrBytes;
	
	//get the time
	GetTime(		NETID:='',
					START:=System.OneSecond,
			);
	
	System.thetime:= GetTime.TIMESTR;
	
	//convert timestruct to DT time
	System.timeDT := SYSTEMTIME_TO_DT(TIMESTR:=system.thetime);

	
	//get CPU usage
	cpuusage(	netID:=,
				Start:=System.PulseHundredMilliSecond,
				TMOUT:=T#10S
				);
	System.cpuusageval  := cpuusage.USAGE;
	
	//get symbol count, usage
	ReadSystemInfo( NETID:=,
					Port:=System.myPlcAppSystemInfo.AdsPort,
					Start:=system.OneSecond,
					TMOUT:=T#10S,
					);
	system.symCount:=ReadSystemInfo.SYMCOUNT;
	system.sysSize:=ReadSystemInfo.SYMSIZE;
	
	//get latency
	getLatency(		NETID:=,
					Start:=system.OneSecond,
					TMOUT:=T#10S,
					);
	System.LatencyMicroSec := getLatency.ACTUAL;
	system.MaxLatencyMicroSec := getLatency.MAXIMUM;
	
	//restart TC
	restartTC(		NETID:=,
					Restart:=System.TCRestartReq,
					TMOUT:=T#10S
					);
					
	//stop TC
	stopTC(			NETID:=,
					STOP:=System.TCStopReq,
					TMOUT:=T#10S
					);
					
	//config mode TC
	configModeTC(	NETID:=,
					SET:=System.TCConfigReq,
					TMOUT:=T#10S
					);
				
	//get host name
	reqHostName(	sNetID:=,
					bExecute:=system.TenSecond,
					tTimeout:=T#10S
					);
	System.NThostname := reqHostName.sHostName;
	
	
	//get networkadaptors
	getNetworkadaptors(	sNetID:=,
						bExecute:=system.TenSecond,
						tTimeout:=T#10S,
						);
	System.networkadaptors:=getNetworkadaptors.arrAdapters;
	
	//get Device Infomation
	getDeviceInfoEx(	bExecute := System.sysDeviceUpdate,
						tTimeout := T#10S,
						sNetId:=
					);
					
	System.sysDeviceInfo := getDeviceInfoEx.stDevIdent;
	

	
	]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="25" Count="10" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="236" Count="2" />
      <LineId Id="271" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="235" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actClockMemory">
      <LineId Id="1" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="38" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="32" Count="3" />
      <LineId Id="31" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actDiag">
      <LineId Id="1" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actInit">
      <LineId Id="28" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="7" Count="5" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="34" Count="1" />
      <LineId Id="38" Count="4" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actLicenceView">
      <LineId Id="2" Count="43" />
      <LineId Id="125" Count="0" />
      <LineId Id="127" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="46" Count="5" />
      <LineId Id="132" Count="3" />
      <LineId Id="130" Count="1" />
      <LineId Id="52" Count="40" />
      <LineId Id="96" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="98" Count="25" />
      <LineId Id="140" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actPLC">
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="26" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="79" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="91" Count="1" />
      <LineId Id="94" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="97" Count="6" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="3" />
      <LineId Id="117" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="3" />
      <LineId Id="123" Count="0" />
      <LineId Id="107" Count="4" />
      <LineId Id="113" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="6" />
      <LineId Id="143" Count="5" />
      <LineId Id="115" Count="0" />
      <LineId Id="86" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>